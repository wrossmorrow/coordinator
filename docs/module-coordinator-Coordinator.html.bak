<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>JSDoc: Class: Coordinator</title>
    <script src="scripts/prettify/prettify.js"> </script>
    <script src="scripts/prettify/lang-css.js"> </script>
    <!--[if lt IE 9]>
      <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    <link type="text/css" rel="stylesheet" href="styles/prettify-tomorrow.css">
    <link type="text/css" rel="stylesheet" href="styles/jsdoc-default.css">
</head>
<body>
<div id="main">
    <h1 class="page-title">Class: Coordinator</h1>
<section>
<header>
        <h2><span class="attribs"><span class="type-signature"></span></span>
            <span class="ancestors"><a href="module-coordinator.html">coordinator</a>~</span>Coordinator<span class="signature">()</span><span class="type-signature"> &rarr; {object}</span></h2>
</header>
<article>
    <div class="container-overview">
    <h4 class="name" id="Coordinator"><span class="type-signature"></span>new Coordinator<span class="signature">()</span><span class="type-signature"> &rarr; {object}</span></h4>
<div class="description">
    Create a `Coordinator` object
</div>
<dl class="details">
    <dt class="tag-author">Author:</dt>
    <dd class="tag-author">
        <ul>
            <li>[W. Ross Morrow](mailto:wrossmorrow@stanford.edu)</li>
        </ul>
    </dd>
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="coordinator.js.html">coordinator.js</a>, <a href="coordinator.js.html#line77">line 77</a>
    </li></ul></dd>
</dl>
<h5>Returns:</h5>
<div class="param-desc">
    A newly instantiated `Coordinator` object
</div>
<dl>
    <dt>
        Type
    </dt>
    <dd>
<span class="param-type">object</span>
    </dd>
</dl>
    <h5>Example</h5>
    <pre class="prettyprint"><code>var C = new Coordinator();</code></pre>
    </div>
        <h3 class="subsection-title">Methods</h3>
    <h4 class="name" id="addStage"><span class="type-signature"></span>addStage<span class="signature">()</span><span class="type-signature"></span></h4>
<div class="description">
    Add a single stage to this `Coordinator`
	"execute" and "rollback" should each be functions that take: 
	
		an object of arguments for itself (the data passed in here)
		a "failure" callback (accepting a single argument, an "error" object)
		a "warning" callback (accepting two arguments, "warning" and "result" objects)
		a "success" callback (accepting a single argument, a "result" object)
 and in that order. 
 "retries" should be a non-negative integer, giving the number of 
	allowable retries for the stage
 "prereqs" should be an array of keys that must execute before this stage
 can execute
 "prepare" should be a function that takes in the dictionary of previous results
	and the data object for this stage and returns a modified data object for this 
 stage
	"data" is any object that should be passed to an evalution of 
	"execute" and "rollback" (as the first argument)
</div>
<dl class="details">
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="coordinator.js.html">coordinator.js</a>, <a href="coordinator.js.html#line821">line 821</a>
    </li></ul></dd>
</dl>
    <h4 class="name" id="addStages"><span class="type-signature"></span>addStages<span class="signature">(stages)</span><span class="type-signature"></span></h4>
<div class="description">
    Add multiple stages
</div>
    <h5>Parameters:</h5>
<table class="params">
    <thead>
    <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
    </tr>
    </thead>
    <tbody>
        <tr>
                <td class="name"><code>stages</code></td>
            <td class="type">
<span class="param-type">array</span>
|
<span class="param-type">object</span>
            </td>
            <td class="description last">Stages to add, either as an `array` of `object`s to 
			add (@see addStage) or as an `object` whose fields are the `key`s and 
			corresponding values are the stage specifications.</td>
        </tr>
    </tbody>
</table>
<dl class="details">
    <dt class="tag-author">Author:</dt>
    <dd class="tag-author">
        <ul>
            <li>[W. Ross Morrow](mailto:wrossmorrow@stanford.edu)</li>
        </ul>
    </dd>
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="coordinator.js.html">coordinator.js</a>, <a href="coordinator.js.html#line882">line 882</a>
    </li></ul></dd>
</dl>
    <h4 class="name" id="clear"><span class="type-signature"></span>clear<span class="signature">()</span><span class="type-signature"></span></h4>
<div class="description">
    Clear **everything** out of this `Coordinator` instance. Deletes all stage data.
</div>
<dl class="details">
    <dt class="tag-author">Author:</dt>
    <dd class="tag-author">
        <ul>
            <li>[W. Ross Morrow](mailto:wrossmorrow@stanford.edu)</li>
        </ul>
    </dd>
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="coordinator.js.html">coordinator.js</a>, <a href="coordinator.js.html#line988">line 988</a>
    </li></ul></dd>
</dl>
    <h5>Example</h5>
    <pre class="prettyprint"><code>C.clear();</code></pre>
    <h4 class="name" id="dropStage"><span class="type-signature"></span>dropStage<span class="signature">(key)</span><span class="type-signature"></span></h4>
<div class="description">
    Drop (delete) a single stage by `key`. Does nothing if the stage is not defined.
</div>
    <h5>Parameters:</h5>
<table class="params">
    <thead>
    <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
    </tr>
    </thead>
    <tbody>
        <tr>
                <td class="name"><code>key</code></td>
            <td class="type">
<span class="param-type">string</span>
            </td>
            <td class="description last">`key` of the stage to be dropped</td>
        </tr>
    </tbody>
</table>
<dl class="details">
    <dt class="tag-author">Author:</dt>
    <dd class="tag-author">
        <ul>
            <li>[W. Ross Morrow](mailto:wrossmorrow@stanford.edu)</li>
        </ul>
    </dd>
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="coordinator.js.html">coordinator.js</a>, <a href="coordinator.js.html#line901">line 901</a>
    </li></ul></dd>
</dl>
    <h4 class="name" id="dropStages"><span class="type-signature"></span>dropStages<span class="signature">(keys)</span><span class="type-signature"></span></h4>
<div class="description">
    Drop (delete) multiple stages
</div>
    <h5>Parameters:</h5>
<table class="params">
    <thead>
    <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
    </tr>
    </thead>
    <tbody>
        <tr>
                <td class="name"><code>keys</code></td>
            <td class="type">
<span class="param-type">array</span>
|
<span class="param-type">object</span>
|
<span class="param-type">string</span>
            </td>
            <td class="description last">Attempt to drop the stages specified with an `array` of 
			`key`s, `object` whose fields are the `key`s, or a single string `key`</td>
        </tr>
    </tbody>
</table>
<dl class="details">
    <dt class="tag-author">Author:</dt>
    <dd class="tag-author">
        <ul>
            <li>[W. Ross Morrow](mailto:wrossmorrow@stanford.edu)</li>
        </ul>
    </dd>
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="coordinator.js.html">coordinator.js</a>, <a href="coordinator.js.html#line920">line 920</a>
    </li></ul></dd>
</dl>
    <h4 class="name" id="getId"><span class="type-signature"></span>getId<span class="signature">()</span><span class="type-signature"> &rarr; {string}</span></h4>
<div class="description">
    Get the unique `id` of this `Coordinator`, in case objects need to be compared. 
		The unique `id` is generated on instantiation and not changed.
</div>
<dl class="details">
    <dt class="tag-author">Author:</dt>
    <dd class="tag-author">
        <ul>
            <li>[W. Ross Morrow](mailto:wrossmorrow@stanford.edu)</li>
        </ul>
    </dd>
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="coordinator.js.html">coordinator.js</a>, <a href="coordinator.js.html#line737">line 737</a>
    </li></ul></dd>
</dl>
<h5>Returns:</h5>
<div class="param-desc">
    The unique `id` of this `Coordinator`
</div>
<dl>
    <dt>
        Type
    </dt>
    <dd>
<span class="param-type">string</span>
    </dd>
</dl>
    <h5>Example</h5>
    <pre class="prettyprint"><code>console.log( "Coordinator C has id: " + C.getId() );</code></pre>
    <h4 class="name" id="getResults"><span class="type-signature"></span>getResults<span class="signature">()</span><span class="type-signature"> &rarr; {object}</span></h4>
<div class="description">
    Get the `results` object for this `Coordinator`, as filled in by a (successful) 
			`run`.
</div>
<dl class="details">
    <dt class="tag-author">Author:</dt>
    <dd class="tag-author">
        <ul>
            <li>[W. Ross Morrow](mailto:wrossmorrow@stanford.edu)</li>
        </ul>
    </dd>
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="coordinator.js.html">coordinator.js</a>, <a href="coordinator.js.html#line752">line 752</a>
    </li></ul></dd>
</dl>
<h5>Returns:</h5>
<div class="param-desc">
    The `results` object for this `Coordinator`. This object will have each 
			stage as a field whose value is the data passed to `success` by that stage.
</div>
<dl>
    <dt>
        Type
    </dt>
    <dd>
<span class="param-type">object</span>
    </dd>
</dl>
    <h5>Example</h5>
    <pre class="prettyprint"><code>var results = C.getResults();</code></pre>
    <h4 class="name" id="getStages"><span class="type-signature"></span>getStages<span class="signature">()</span><span class="type-signature"> &rarr; {array}</span></h4>
<div class="description">
    Get the stages currently defined for this `Coordinator` as an `array`
</div>
<dl class="details">
    <dt class="tag-author">Author:</dt>
    <dd class="tag-author">
        <ul>
            <li>[W. Ross Morrow](mailto:wrossmorrow@stanford.edu)</li>
        </ul>
    </dd>
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="coordinator.js.html">coordinator.js</a>, <a href="coordinator.js.html#line765">line 765</a>
    </li></ul></dd>
</dl>
<h5>Returns:</h5>
<div class="param-desc">
    An `array` containing the stages (`key`s) in this `Coordinator`
</div>
<dl>
    <dt>
        Type
    </dt>
    <dd>
<span class="param-type">array</span>
    </dd>
</dl>
    <h5>Example</h5>
    <pre class="prettyprint"><code>var stages = C.getStages();</code></pre>
    <h4 class="name" id="isDAG"><span class="type-signature"></span>isDAG<span class="signature">()</span><span class="type-signature"> &rarr; {bool}</span></h4>
<div class="description">
    Test `Coordinator` Stages for [DAG](https://en.wikipedia.org/wiki/Directed_acyclic_graph) 
			property (no cycles). This is done using the Tarjan algorithm, as implemented in 
			the `tarjan-graph` module (included explicitly here with permission).
</div>
<dl class="details">
    <dt class="tag-author">Author:</dt>
    <dd class="tag-author">
        <ul>
            <li>[W. Ross Morrow](mailto:wrossmorrow@stanford.edu)</li>
        </ul>
    </dd>
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="coordinator.js.html">coordinator.js</a>, <a href="coordinator.js.html#line960">line 960</a>
    </li></ul></dd>
</dl>
<h5>Returns:</h5>
<div class="param-desc">
    `True` if stages form a DAG, `False` if not (there is a cycle). `Coordinator`
			can only be `run` if there are no cyclces.
</div>
<dl>
    <dt>
        Type
    </dt>
    <dd>
<span class="param-type">bool</span>
    </dd>
</dl>
    <h5>Example</h5>
    <pre class="prettyprint"><code>if( C.isDAG() ) { 
    C.log( "No cycles" ); 
} else { 
    C.log( "There is a cycle" ); 
}</code></pre>
    <h4 class="name" id="log"><span class="type-signature"></span>log<span class="signature">(s)</span><span class="type-signature"></span></h4>
<div class="description">
    Internal `Coordinator` log function
</div>
    <h5>Parameters:</h5>
<table class="params">
    <thead>
    <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
    </tr>
    </thead>
    <tbody>
        <tr>
                <td class="name"><code>s</code></td>
            <td class="type">
<span class="param-type">string</span>
            </td>
            <td class="description last">text to log</td>
        </tr>
    </tbody>
</table>
<dl class="details">
    <dt class="tag-author">Author:</dt>
    <dd class="tag-author">
        <ul>
            <li>[W. Ross Morrow](mailto:wrossmorrow@stanford.edu)</li>
        </ul>
    </dd>
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="coordinator.js.html">coordinator.js</a>, <a href="coordinator.js.html#line713">line 713</a>
    </li></ul></dd>
</dl>
    <h5>Example</h5>
    <pre class="prettyprint"><code>C.log( "some text" );</code></pre>
    <h4 class="name" id="printStages"><span class="type-signature"></span>printStages<span class="signature">()</span><span class="type-signature"> &rarr; {string}</span></h4>
<div class="description">
    Get the stages currently defined for this `Coordinator`, as a CSV string
</div>
<dl class="details">
    <dt class="tag-author">Author:</dt>
    <dd class="tag-author">
        <ul>
            <li>[W. Ross Morrow](mailto:wrossmorrow@stanford.edu)</li>
        </ul>
    </dd>
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="coordinator.js.html">coordinator.js</a>, <a href="coordinator.js.html#line778">line 778</a>
    </li></ul></dd>
</dl>
<h5>Returns:</h5>
<div class="param-desc">
    A CSV string listing the stages in this `Coordinator`
</div>
<dl>
    <dt>
        Type
    </dt>
    <dd>
<span class="param-type">string</span>
    </dd>
</dl>
    <h5>Example</h5>
    <pre class="prettyprint"><code>console.log( C.printStages() );</code></pre>
    <h4 class="name" id="run"><span class="type-signature"></span>run<span class="signature">(failure, success, data)</span><span class="type-signature"></span></h4>
<div class="description">
    `Coordinator` "run" method. Issue this call with callbacks for success and 
			failure and, optionally, initial stage data to use to "run" the actions specified
			by the stages.
</div>
    <h5>Parameters:</h5>
<table class="params">
    <thead>
    <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
    </tr>
    </thead>
    <tbody>
        <tr>
                <td class="name"><code>failure</code></td>
            <td class="type">
<span class="param-type">function</span>
            </td>
            <td class="description last">Callback to execute on failure with an `error` object. Prototype 
			is `( error ) => { ... }`</td>
        </tr>
        <tr>
                <td class="name"><code>success</code></td>
            <td class="type">
<span class="param-type">function</span>
            </td>
            <td class="description last">Callback to execute on success (with or without warning). Prototype 
			is `( results ) => { ... }`</td>
        </tr>
        <tr>
                <td class="name"><code>data</code></td>
            <td class="type">
<span class="param-type">object</span>
            </td>
            <td class="description last">(optional) Stage `data` to use for this run, supercedes any data provided
			when stage was defined.</td>
        </tr>
    </tbody>
</table>
<dl class="details">
    <dt class="tag-author">Author:</dt>
    <dd class="tag-author">
        <ul>
            <li>[W. Ross Morrow](mailto:wrossmorrow@stanford.edu)</li>
        </ul>
    </dd>
    <dt class="tag-source">Source:</dt>
    <dd class="tag-source"><ul class="dummy"><li>
        <a href="coordinator.js.html">coordinator.js</a>, <a href="coordinator.js.html#line1035">line 1035</a>
    </li></ul></dd>
</dl>
    <h5>Example</h5>
    <pre class="prettyprint"><code>C.run( (e)=>{ C.log(e.toString()); } , (r)=>{C.log("success!");} );</code></pre>
</article>
</section>
</div>
<nav>
    <h2><a href="index.html">Home</a></h2><h3>Modules</h3><ul><li><a href="module-coordinator.html">coordinator</a></li></ul><h3>Classes</h3><ul><li><a href="module-coordinator-Coordinator.html">Coordinator</a></li></ul>
</nav>
<br class="clear">
<footer>
    Documentation generated by <a href="https://github.com/jsdoc/jsdoc">JSDoc 3.6.1</a> on Mon May 13 2019 10:40:05 GMT-0700 (PDT)
</footer>
<script> prettyPrint(); </script>
<script src="scripts/linenumber.js"> </script>
</body>
</html>
